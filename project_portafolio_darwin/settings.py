"""
Django settings for project_portafolio_darwin project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from decouple import config
import dj_database_url

#Other
import logging


logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('Django')


# BASE_DIR
BASE_DIR = Path(__file__).resolve().parent.parent

# 🔐 Claves secretas y entorno
SECRET_KEY = config('SECRET_KEY')
ENVIRONMENT = config('ENVIRONMENT', default='development')
DEBUG = ENVIRONMENT != 'production'
# CLOUDINARY_URL = os.environ.get('CLOUDINARY_URL')
# CLOUD_NAME = os.environ.get('CLOUDINARY_CLOUD_NAME')
# API_KEY = os.environ.get('CLOUDINARY_API_KEY')
# API_SECRET = os.environ.get('CLOUDINARY_API_SECRET')
CLOUDINARY_URL = config('CLOUDINARY_URL', default="")
CLOUD_NAME = config('CLOUDINARY_CLOUD_NAME', default="")
API_KEY = config('CLOUDINARY_API_KEY', default="")
API_SECRET = config('CLOUDINARY_API_SECRET', default="")

# 🖼️ Archivos multimedia
# >>> CAMBIO CLAVE 2: CLOUDINARY_STORAGE DEBE ESTAR DEFINIDO GLOBALMENTE (fuera de cualquier 'if/else') <<<
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': CLOUD_NAME,
    'API_KEY': API_KEY,
    'API_SECRET': API_SECRET,
}

logger.warning(f'entorno actual: {ENVIRONMENT}')

# 🌍 Hosts permitidos
ALLOWED_HOSTS = []
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# 📦 Aplicaciones instaladas
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Apps del proyecto
    'app_home.apps.AppHomeConfig',
    'app_about_me.apps.AppAboutMeConfig',
    'app_projects.apps.AppProjectsConfig',
    'app_contact.apps.AppContactConfig',
    'app_sendmails.apps.AppSendmailsConfig',
    'app_user.apps.AppUserConfig',

    # Herramientas
    'django_bootstrap5',
    'cloudinary',
    'cloudinary_storage',
]

# 🧱 Middlewares
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Requerido por Render
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project_portafolio_darwin.urls'

# 🖼️ Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'app_home.context_processors.debug_mode',
            ],
        },
    },
]

WSGI_APPLICATION = 'project_portafolio_darwin.wsgi.application'

# 🗃️ Bases de datos
if 'DATABASE_URL' in os.environ:
    DATABASES = {
        'default': dj_database_url.config(
            default=f'sqlite:///{BASE_DIR / "db.sqlite3"}',
            conn_max_age=600
        )
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# 🔐 Validadores de contraseña
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 🌐 Internacionalización
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# 📂 Archivos estáticos
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, 'app_about_me/static'),
    os.path.join(BASE_DIR, 'app_projects/static'),
]

# Configuración de producción (Render)
if not DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# 🖼️ Archivos multimedia
if ENVIRONMENT == 'production':
    # Añade estas impresiones para depuración:
    print(f"DEBUG_PROD_CLOUDINARY_URL: {CLOUDINARY_URL}")
    print(f"DEBUG_PROD_CLOUD_NAME_ENV: {os.environ.get('CLOUDINARY_CLOUD_NAME')}")
    CLOUDINARY_STORAGE = {
        #"CLOUDINARY_URL": CLOUDINARY_URL
        #Linea comentada - POible causa de error de no arga cloudinary_url, En vez de usar config(), usar os.environ.get() directamente. A veces config() no detecta bien variables en ciertos entornos de despliegue.
        # "CLOUDINARY_URL": config('CLOUDINARY_URL'),
        'CLOUD_NAME': CLOUD_NAME,
        'API_KEY': API_KEY,
        'API_SECRET': API_SECRET,
        'MEDIA_TAG' :'media',
        'SECURE':  True,
    }
    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
    #MEDIA_URL = f"https://res.cloudinary.com/{os.environ.get('CLOUDINARY_CLOUD_NAME')}/"
else: # ENVIRONMENT == 'development'
    # --- CONFIGURACIÓN PARA DESARROLLO LOCAL ---
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage' 
    
# 📧 Configuración de correo
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')

# 🔑 Campo ID por defecto
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#Prueba
import os

print(f"CLOUDINARY_URL desde os.environ: {os.environ.get('CLOUDINARY_URL')}")
